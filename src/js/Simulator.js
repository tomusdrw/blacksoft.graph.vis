// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['require', 'backbone', 'arbor', 'SimulatorUtils'], function(require, Backbone, arbor, SimulatorUtils) {
    var Edge, Node, Simulator;
    Node = (function() {

      Node.prototype.DEFAULTS = {
        size: 10,
        borderWidth: 1,
        borderColor: '#030',
        markedColor: '#f44',
        defaultColor: '#4f4'
      };

      function Node(system, node, utils) {
        this.system = system;
        this.node = node;
        this.utils = utils;
        this.node.data.color = this.DEFAULTS.defaultColor;
        this.node.data.size = this.DEFAULTS.size;
        this.node.data.borderWidth = this.DEFAULTS.borderWidth;
        this.node.data.borderColor = this.DEFAULTS.borderColor;
        this.marked = false;
      }

      Node.prototype.unmark = function() {
        this.marked = false;
        return this.node.data.color = this.DEFAULTS.defaultColor;
      };

      Node.prototype.mark = function() {
        this.marked = true;
        return this.node.data.color = this.DEFAULTS.markedColor;
      };

      Node.prototype.isMarked = function() {
        return this.marked;
      };

      Node.prototype.getDegree = function() {
        return this.utils.getDegree(this);
      };

      Node.prototype.toString = function() {
        return this.node.name;
      };

      return Node;

    })();
    Edge = (function() {

      Edge.prototype.DEFAULTS = {
        size: 2,
        color: '#222'
      };

      function Edge(system, edge) {
        this.system = system;
        this.edge = edge;
        this.edge.color = this.DEFAULTS.color;
        this.edge.size = this.DEFAULTS.size;
      }

      Edge.prototype.from = function() {
        return this.edge.source.obj;
      };

      Edge.prototype.to = function() {
        return this.edge.target.obj;
      };

      return Edge;

    })();
    Simulator = (function(_super) {

      __extends(Simulator, _super);

      Simulator.prototype.defaults = {
        step: 0,
        running: false,
        finished: false
      };

      function Simulator(graph, system, prefs) {
        this.graph = graph;
        this.system = system;
        this.prefs = prefs;
        Simulator.__super__.constructor.call(this);
        this.utils = new SimulatorUtils(this);
        this.graph.on('change', this.newGraph, this);
        this.prefs.on('change:algo', this.loadAlgo, this);
        this.loadAlgo();
      }

      Simulator.prototype.loadAlgo = function() {
        var _this = this;
        return require(['algo/' + this.prefs.get('algo')], function(algo) {
          _this.algorithm = algo;
          if (_this.algorithm != null) {
            return _this.algorithm.init(_this.utils.getNodes());
          }
        });
      };

      Simulator.prototype.newGraph = function() {
        var _this = this;
        this.system.eachNode(function(node) {
          return node.obj = new Node(_this.system, node, _this.utils);
        });
        this.system.eachEdge(function(edge) {
          return edge.obj = new Edge(_this.system, edge, _this.utils);
        });
        if (this.algorithm != null) {
          this.algorithm.init(this.utils.getNodes());
        }
        return this.trigger('newGraph');
      };

      Simulator.prototype.isRunning = function() {
        return this.get('running');
      };

      Simulator.prototype.isFinished = function() {
        return this.get('finished');
      };

      Simulator.prototype.restart = function() {
        var _this = this;
        this.graph.reparse();
        return _.delay(function() {
          _this.newGraph();
          return _this.start();
        }, 100);
      };

      Simulator.prototype.start = function() {
        var _this = this;
        if (!(this.algorithm != null)) {
          throw Error("No algorithm!");
        }
        this.set('step', 0);
        this.set('running', true);
        this.set('finished', false);
        return this.interval = window.setInterval(function() {
          var res;
          res = _this.step();
          if ((res != null)) {
            return _this.stop();
          }
        }, this.prefs.get('delay'));
      };

      Simulator.prototype.stop = function() {
        if (this.interval != null) {
          window.clearInterval(this.interval);
        }
        return this.set('running', false);
      };

      Simulator.prototype.step = function() {
        var msg;
        if (this.algorithm.isDone()) {
          this.set('finished', true);
          this.trigger('message', "Algorithm finished with result: " + this.algorithm.getResult());
          return this.algorithm.getResult();
        }
        this.set('step', this.get('step') + 1);
        msg = this.algorithm.step(this.utils);
        if (msg != null) {
          this.trigger('message', msg);
        }
        return null;
      };

      return Simulator;

    })(Backbone.Model);
    return Simulator;
  });

}).call(this);
