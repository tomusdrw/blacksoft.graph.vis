// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['_', 'backbone', 'arbor'], function(_, Backbone, arbor) {
    var Edge, Node, Simulator;
    Node = (function() {

      Node.prototype.DEFAULTS = {
        size: 10,
        borderWidth: 1,
        borderColor: '#030',
        markedColor: '#f44',
        defaultColor: '#4f4'
      };

      function Node(system, node) {
        this.system = system;
        this.node = node;
        this.node.color = this.DEFAULTS.defaultColor;
        this.node.size = this.DEFAULTS.size;
        this.node.borderWidth = this.DEFAULTS.borderWidth;
        this.node.borderColor = this.DEFAULTS.borderColor;
      }

      Node.prototype.unmark = function() {
        return this.node.color = this.DEFAULTS.defaultColor;
      };

      Node.prototype.mark = function() {
        return this.node.color = this.DEFAULTS.markedColor;
      };

      return Node;

    })();
    Edge = (function() {

      Edge.prototype.DEFAULTS = {
        size: 2,
        color: '#222'
      };

      function Edge(system, edge) {
        this.system = system;
        this.edge = edge;
        this.edge.color = this.DEFAULTS.color;
        this.edge.size = this.DEFAULTS.size;
      }

      return Edge;

    })();
    Simulator = (function(_super) {

      __extends(Simulator, _super);

      function Simulator(system) {
        this.system = system;
        Simulator.__super__.constructor.call(this);
        this.system.eachNode(function(node) {
          return node.obj = new Node(system, node);
        });
        this.system.eachEdge(function(edge) {
          return edge.obj = new Edge(system, edge);
        });
      }

      Simulator.prototype.removeNode = function(node) {
        return this.system.pruneNode(node.node);
      };

      Simulator.prototype.removeEdge = function(edge) {
        return this.system.pruneEdge(edge.edge);
      };

      Simulator.prototype.getNodes = function() {
        var nodes;
        nodes = [];
        this.system.eachNode(function(node) {
          return nodes.push(node.obj);
        });
        return nodes;
      };

      Simulator.prototype.getEdges = function() {
        var edges;
        edges = [];
        this.system.eachEdge(function(edge) {
          return edges.push(edge.obj);
        });
        return edges;
      };

      Simulator.prototype.isRunning = function() {
        return this.get('running');
      };

      Simulator.prototype.start = function(stepTime) {
        var _this = this;
        if (stepTime == null) {
          stepTime = 1000;
        }
        this.interval = window.setInterval(function() {
          return _this.step();
        }, stepTime);
        return this.set('running', true);
      };

      Simulator.prototype.stop = function() {
        if (this.interval != null) {
          window.clearInterval(this.interval);
        }
        return this.set('running', false);
      };

      Simulator.prototype.step = function() {
        var msg;
        msg = this.algorithm.step(this.getNodes(), this.getEdges());
        if (msg != null) {
          return this.trigger('message', msg);
        }
      };

      return Simulator;

    })(Backbone.Model);
    return Simulator;
  });

}).call(this);
